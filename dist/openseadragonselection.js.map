{"version":3,"sources":["selection.js","selectionoverlay.js","selectionrect.js"],"names":["$","onOutsideDrag","e","this","viewer","setMouseNavEnabled","delta","viewport","deltaPointsFromPixels","end","pointFromPixel","position","start","Point","x","y","rect","oldRect","restrictToImage","clone","rectDone","fitsIn","Rect","startRotated","getPrerotatedRect","rotatedStartPoint","startRotatedHeight","width","height","bounds","world","getHomeBounds","pointIsInImage","restrictVector","SelectionRect","draw","onOutsideDragEnd","onClick","canvas","focus","onInsideDrag","addClass","element","onInsideDragEnd","removeClass","onBorderDrag","border","center","rotation","getDegreeRotation","rotate","getCenter","newCenter","target","minus","onKeyPress","key","keyCode","charCode","confirm","String","fromCharCode","keyboardShortcut","toggleState","dist","distanceTo","angle","Math","atan2","PI","heightModDelta","self","point","prop","version","major","Error","Viewer","prototype","selection","options","selectionInstance","Selection","extend","isSelecting","buttonActiveImg","toggleButton","showSelectionControl","showConfirmDenyButtons","styleConfirmDenyButtons","returnPixelCoordinates","onSelection","prefixUrl","navImages","REST","GROUP","HOVER","DOWN","selectionConfirm","selectionCancel","makeNeutralElement","style","background","className","borders","handle","corners","i","top","left","margin","MouseTracker","dragHandler","bind","appendChild","setTimeout","right","bottom","overlay","SelectionOverlay","innerTracker","clickTimeThreshold","clickDistThreshold","delegate","dragEndHandler","clickHandler","outerTracker","startDisabled","addEvent","container","prefix","useGroup","buttons","anyButton","onFocusHandler","onFocus","onBlurHandler","onBlur","Button","getElement","tooltip","getString","srcRest","srcGroup","srcHover","srcDown","onRelease","push","imgDown","cloneNode","confirmButton","classList","add","cancelButton","cancel","transform","addHandler","ControlDock","setState","enabled","setTracking","undraw","visibility","raiseEvent","enable","disable","update","normalize","drawHTML","drawer","destroy","result","real","viewportToImageRectangle","fromRect","round","OpenSeadragon","location","Overlay","apply","arguments","isPlainObject","Object","create","replace","equals","other","toString","swapWidthHeight","swapped","getAngleFromCenter","diff","fixed","area","getTopLeft","getTopRight","getBottomRight","getBottomLeft","areaEnd","reduceRotation","reduced"],"mappings":"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","file":"openseadragonselection.js","sourcesContent":["(function($) {\n    'use strict';\n\n    if (!$.version || $.version.major < 2) {\n        throw new Error('This version of OpenSeadragonSelection requires OpenSeadragon version 2.0.0+');\n    }\n\n    $.Viewer.prototype.selection = function(options) {\n        if (!this.selectionInstance || options) {\n            options = options || {};\n            options.viewer = this;\n            this.selectionInstance = new $.Selection(options);\n        }\n        return this.selectionInstance;\n    };\n\n\n    /**\n    * @class Selection\n    * @classdesc Provides functionality for selecting part of an image\n    * @memberof OpenSeadragon\n    * @param {Object} options\n    */\n    $.Selection = function ( options ) {\n\n        $.extend( true, this, {\n            // internal state properties\n            viewer:                  null,\n            isSelecting:             false,\n            buttonActiveImg:         false,\n            rectDone:                true,\n\n            // options\n            element:                 null,\n            toggleButton:            null,\n            showSelectionControl:    true,\n            showConfirmDenyButtons:  true,\n            styleConfirmDenyButtons: true,\n            returnPixelCoordinates:  true,\n            keyboardShortcut:        'c',\n            rect:                    null,\n            startRotated:            false, // useful for rotated crops\n            startRotatedHeight:      0.1,\n            restrictToImage:         false,\n            onSelection:             null,\n            prefixUrl:               null,\n            navImages:               {\n                selection: {\n                    REST:   'selection_rest.png',\n                    GROUP:  'selection_grouphover.png',\n                    HOVER:  'selection_hover.png',\n                    DOWN:   'selection_pressed.png'\n                },\n                selectionConfirm: {\n                    REST:   'selection_confirm_rest.png',\n                    GROUP:  'selection_confirm_grouphover.png',\n                    HOVER:  'selection_confirm_hover.png',\n                    DOWN:   'selection_confirm_pressed.png'\n                },\n                selectionCancel: {\n                    REST:   'selection_cancel_rest.png',\n                    GROUP:  'selection_cancel_grouphover.png',\n                    HOVER:  'selection_cancel_hover.png',\n                    DOWN:   'selection_cancel_pressed.png'\n                },\n            }\n        }, options );\n\n        $.extend( true, this.navImages, this.viewer.navImages );\n\n        if (!this.element) {\n            this.element = $.makeNeutralElement('div');\n            this.element.style.background = 'rgba(0, 0, 0, 0.1)';\n            this.element.className        = 'selection-box';\n        }\n        this.borders = this.borders || [];\n        var handle;\n        var corners = [];\n        for (var i = 0; i < 4; i++) {\n            if (!this.borders[i]) {\n                this.borders[i]                  = $.makeNeutralElement('div');\n                this.borders[i].className        = 'border-' + i;\n                this.borders[i].style.position   = 'absolute';\n                this.borders[i].style.width      = '1px';\n                this.borders[i].style.height     = '1px';\n                this.borders[i].style.background = '#fff';\n            }\n\n            handle                  = $.makeNeutralElement('div');\n            handle.className        = 'border-' + i + '-handle';\n            handle.style.position   = 'absolute';\n            handle.style.top        = '50%';\n            handle.style.left       = '50%';\n            handle.style.width      = '6px';\n            handle.style.height     = '6px';\n            handle.style.margin     = '-4px 0 0 -4px';\n            handle.style.background = '#000';\n            handle.style.border     = '1px solid #ccc';\n            new $.MouseTracker({\n                element:     this.borders[i],\n                dragHandler: onBorderDrag.bind(this, i),\n            });\n\n            corners[i]                  = $.makeNeutralElement('div');\n            corners[i].className        = 'corner-' + i + '-handle';\n            corners[i].style.position   = 'absolute';\n            corners[i].style.width      = '6px';\n            corners[i].style.height     = '6px';\n            corners[i].style.background = '#000';\n            corners[i].style.border     = '1px solid #ccc';\n            new $.MouseTracker({\n                element:     corners[i],\n                dragHandler: onBorderDrag.bind(this, i + 0.5),\n            });\n\n            this.borders[i].appendChild(handle);\n            this.element.appendChild(this.borders[i]);\n            // defer corners, so they are appended last\n            setTimeout(this.element.appendChild.bind(this.element, corners[i]), 0);\n        }\n        this.borders[0].style.top = 0;\n        this.borders[0].style.width = '100%';\n        this.borders[1].style.right = 0;\n        this.borders[1].style.height = '100%';\n        this.borders[2].style.bottom = 0;\n        this.borders[2].style.width = '100%';\n        this.borders[3].style.left = 0;\n        this.borders[3].style.height = '100%';\n        corners[0].style.top = '-3px';\n        corners[0].style.left = '-3px';\n        corners[1].style.top = '-3px';\n        corners[1].style.right = '-3px';\n        corners[2].style.bottom = '-3px';\n        corners[2].style.right = '-3px';\n        corners[3].style.bottom = '-3px';\n        corners[3].style.left = '-3px';\n\n        if (!this.overlay) {\n            this.overlay = new $.SelectionOverlay(this.element, this.rect || new $.SelectionRect());\n        }\n\n        this.innerTracker = new $.MouseTracker({\n            element:            this.element,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onInsideDrag ),\n            dragEndHandler:     $.delegate( this, onInsideDragEnd ),\n            // keyHandler:         $.delegate( this, onKeyPress ),\n            clickHandler:       $.delegate( this, onClick ),\n            // scrollHandler:      $.delegate( this.viewer, this.viewer.innerTracker.scrollHandler ),\n            // pinchHandler:       $.delegate( this.viewer, this.viewer.innerTracker.pinchHandler ),\n        });\n\n        this.outerTracker = new $.MouseTracker({\n            element:            this.viewer.canvas,\n            clickTimeThreshold: this.viewer.clickTimeThreshold,\n            clickDistThreshold: this.viewer.clickDistThreshold,\n            dragHandler:        $.delegate( this, onOutsideDrag ),\n            dragEndHandler:     $.delegate( this, onOutsideDragEnd ),\n            clickHandler:       $.delegate( this, onClick ),\n            startDisabled:      !this.isSelecting,\n        });\n\n        if (this.keyboardShortcut) {\n            $.addEvent(\n                this.viewer.container,\n                'keypress',\n                $.delegate(this, onKeyPress),\n                false\n            );\n        }\n\n        var prefix = this.prefixUrl || this.viewer.prefixUrl || '';\n        var useGroup = this.viewer.buttons && this.viewer.buttons.buttons;\n        var anyButton = useGroup ? this.viewer.buttons.buttons[0] : null;\n        var onFocusHandler = anyButton ? anyButton.onFocus : null;\n        var onBlurHandler = anyButton ? anyButton.onBlur : null;\n        if (this.showSelectionControl) {\n            this.toggleButton = new $.Button({\n                element:    this.toggleButton ? $.getElement( this.toggleButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionToggle') || 'Toggle selection',\n                srcRest:    prefix + this.navImages.selection.REST,\n                srcGroup:   prefix + this.navImages.selection.GROUP,\n                srcHover:   prefix + this.navImages.selection.HOVER,\n                srcDown:    prefix + this.navImages.selection.DOWN,\n                onRelease:  this.toggleState.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            if (useGroup) {\n                this.viewer.buttons.buttons.push(this.toggleButton);\n                this.viewer.buttons.element.appendChild(this.toggleButton.element);\n            }\n            if (this.toggleButton.imgDown) {\n                this.buttonActiveImg = this.toggleButton.imgDown.cloneNode(true);\n                this.toggleButton.element.appendChild(this.buttonActiveImg);\n            }\n        }\n        if (this.showConfirmDenyButtons) {\n            this.confirmButton = new $.Button({\n                element:    this.confirmButton ? $.getElement( this.confirmButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Confirm selection',\n                srcRest:    prefix + this.navImages.selectionConfirm.REST,\n                srcGroup:   prefix + this.navImages.selectionConfirm.GROUP,\n                srcHover:   prefix + this.navImages.selectionConfirm.HOVER,\n                srcDown:    prefix + this.navImages.selectionConfirm.DOWN,\n                onRelease:  this.confirm.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var confirm = this.confirmButton.element;\n            confirm.classList.add('confirm-button');\n            this.element.appendChild(confirm);\n\n            this.cancelButton = new $.Button({\n                element:    this.cancelButton ? $.getElement( this.cancelButton ) : null,\n                clickTimeThreshold: this.viewer.clickTimeThreshold,\n                clickDistThreshold: this.viewer.clickDistThreshold,\n                tooltip:    $.getString('Tooltips.SelectionConfirm') || 'Cancel selection',\n                srcRest:    prefix + this.navImages.selectionCancel.REST,\n                srcGroup:   prefix + this.navImages.selectionCancel.GROUP,\n                srcHover:   prefix + this.navImages.selectionCancel.HOVER,\n                srcDown:    prefix + this.navImages.selectionCancel.DOWN,\n                onRelease:  this.cancel.bind( this ),\n                onFocus:    onFocusHandler,\n                onBlur:     onBlurHandler\n            });\n            var cancel = this.cancelButton.element;\n            cancel.classList.add('cancel-button');\n            this.element.appendChild(cancel);\n\n            if (this.styleConfirmDenyButtons) {\n                confirm.style.position = 'absolute';\n                confirm.style.top = '50%';\n                confirm.style.left = '50%';\n                confirm.style.transform = 'translate(-100%, -50%)';\n\n                cancel.style.position = 'absolute';\n                cancel.style.top = '50%';\n                cancel.style.left = '50%';\n                cancel.style.transform = 'translate(0, -50%)';\n            }\n        }\n\n        this.viewer.addHandler('selection', this.onSelection);\n\n        this.viewer.addHandler('open', this.draw.bind(this));\n        this.viewer.addHandler('animation', this.draw.bind(this));\n        this.viewer.addHandler('resize', this.draw.bind(this));\n        this.viewer.addHandler('rotate', this.draw.bind(this));\n    };\n\n    $.extend( $.Selection.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Selection.prototype */{\n\n        toggleState: function() {\n            return this.setState(!this.isSelecting);\n        },\n\n        setState: function(enabled) {\n            this.isSelecting = enabled;\n            // this.viewer.innerTracker.setTracking(!enabled);\n            this.outerTracker.setTracking(enabled);\n            enabled ? this.draw() : this.undraw();\n            if (this.buttonActiveImg) {\n                this.buttonActiveImg.style.visibility = enabled ? 'visible' : 'hidden';\n            }\n            this.viewer.raiseEvent('selection_toggle', {enabled: enabled});\n            return this;\n        },\n\n        enable: function() {\n            return this.setState(true);\n        },\n\n        disable: function() {\n            return this.setState(false);\n        },\n\n        draw: function() {\n            if (this.rect) {\n                this.overlay.update(this.rect.normalize());\n                this.overlay.drawHTML(this.viewer.drawer.container, this.viewer.viewport);\n            }\n            return this;\n        },\n\n        undraw: function() {\n            this.overlay.destroy();\n            this.rect = null;\n            return this;\n        },\n\n        confirm: function() {\n            if (this.rect) {\n                var result = this.rect.normalize();\n                if (this.returnPixelCoordinates) {\n                    var real = this.viewer.viewport.viewportToImageRectangle(result);\n                    real = $.SelectionRect.fromRect(real).round();\n                    real.rotation = result.rotation;\n                    result = real;\n                }\n                this.viewer.raiseEvent('selection', result);\n                this.undraw();\n            }\n            return this;\n        },\n\n        cancel: function() {\n            this.viewer.raiseEvent('selection_cancel', false);\n            return this.undraw();\n        },\n    });\n\n    function onOutsideDrag(e) {\n        // Disable move when makeing new selection\n        this.viewer.setMouseNavEnabled(false);\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        var end = this.viewer.viewport.pointFromPixel(e.position, true);\n        var start = new $.Point(end.x - delta.x, end.y - delta.y);\n        if (!this.rect) {\n            if (this.restrictToImage) {\n                if (!pointIsInImage(this, start)) {\n                    return;\n                }\n                restrictVector(delta, end);\n            }\n            if (this.startRotated) {\n                this.rotatedStartPoint = start;\n                this.rect = getPrerotatedRect(start, end, this.startRotatedHeight);\n            } else {\n                this.rect = new $.SelectionRect(start.x, start.y, delta.x, delta.y);\n            }\n            this.rectDone = false;\n        } else {\n            var oldRect;\n            if (this.restrictToImage) {\n                oldRect = this.rect.clone();\n            }\n            if (this.rectDone) {\n                // disable rotate\n                this.rect.x += delta.x;\n                this.rect.y += delta.y;\n                if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, 1, 1))) {\n                    this.rect.x -= delta.x;\n                    this.rect.y -= delta.y;\n                }\n                // rotate\n                // var angle1 = this.rect.getAngleFromCenter(start);\n                // var angle2 = this.rect.getAngleFromCenter(end);\n                // this.rect.rotation = (this.rect.rotation + angle1 - angle2) % Math.PI;\n            } else {\n                if (this.startRotated) {\n                    this.rect = getPrerotatedRect(this.rotatedStartPoint, end, this.startRotatedHeight);\n                } else {\n                    this.rect.width += delta.x;\n                    this.rect.height += delta.y;\n                }\n            }\n            var bounds = this.viewer.world.getHomeBounds();\n            if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n                this.rect = oldRect;\n            }\n        }\n        this.draw();\n    }\n\n    function onOutsideDragEnd() {\n        // Eable move after new selection is done\n        this.viewer.setMouseNavEnabled(true);\n        this.rectDone = true;\n    }\n\n    function onClick() {\n        this.viewer.canvas.focus();\n    }\n\n    function onInsideDrag(e) {\n        $.addClass(this.element, 'dragging');\n        var delta = this.viewer.viewport.deltaPointsFromPixels(e.delta, true);\n        this.rect.x += delta.x;\n        this.rect.y += delta.y;\n        var bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect.x -= delta.x;\n            this.rect.y -= delta.y;\n        }\n        this.draw();\n    }\n\n    function onInsideDragEnd() {\n        $.removeClass(this.element, 'dragging');\n    }\n\n    function onBorderDrag(border, e) {\n        var delta = e.delta;\n        var rotation = this.rect.getDegreeRotation();\n        var center;\n        var oldRect = this.restrictToImage ? this.rect.clone() : null;\n        if (rotation !== 0) {\n            // adjust vector\n            delta = delta.rotate(-1 * rotation, new $.Point(0, 0));\n            center = this.rect.getCenter();\n        }\n        delta = this.viewer.viewport.deltaPointsFromPixels(delta, true);\n        switch (border) {\n            case 0:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                break;\n            case 1:\n                this.rect.width += delta.x;\n                break;\n            case 2:\n                this.rect.height += delta.y;\n                break;\n            case 3:\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 0.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n            case 1.5:\n                this.rect.y += delta.y;\n                this.rect.height -= delta.y;\n                this.rect.width += delta.x;\n                break;\n            case 2.5:\n                this.rect.width += delta.x;\n                this.rect.height += delta.y;\n                break;\n            case 3.5:\n                this.rect.height += delta.y;\n                this.rect.x += delta.x;\n                this.rect.width -= delta.x;\n                break;\n        }\n        if (rotation !== 0) {\n            // calc center deviation\n            var newCenter = this.rect.getCenter();\n            // rotate new center around old\n            var target = newCenter.rotate(rotation, center);\n            // adjust new center\n            delta = target.minus(newCenter);\n            this.rect.x += delta.x;\n            this.rect.y += delta.y;\n        }\n        var bounds = this.viewer.world.getHomeBounds();\n        if (this.restrictToImage && !this.rect.fitsIn(new $.Rect(0, 0, bounds.width, bounds.height))) {\n            this.rect = oldRect;\n        }\n        this.draw();\n    }\n\n    function onKeyPress(e) {\n        var key = e.keyCode ? e.keyCode : e.charCode;\n        if (key === 13) {\n            this.confirm();\n        } else if (String.fromCharCode(key) === this.keyboardShortcut) {\n            this.toggleState();\n        }\n    }\n\n    function getPrerotatedRect(start, end, height) {\n        if (start.x > end.x) {\n            // always draw left to right\n            var x = start;\n            start = end;\n            end = x;\n        }\n        var delta = end.minus(start);\n        var dist = start.distanceTo(end);\n        var angle = -1 * Math.atan2(delta.x, delta.y) + (Math.PI / 2);\n        var center = new $.Point(\n            delta.x / 2 + start.x,\n            delta.y / 2 + start.y\n        );\n        var rect = new $.SelectionRect(\n            center.x - (dist / 2),\n            center.y - (height / 2),\n            dist,\n            height,\n            angle\n        );\n        var heightModDelta = new $.Point(0, height);\n        heightModDelta = heightModDelta.rotate(rect.getDegreeRotation(), new $.Point(0, 0));\n        rect.x += heightModDelta.x / 2;\n        rect.y += heightModDelta.y / 2;\n        return rect;\n    }\n\n    function pointIsInImage(self, point) {\n        var bounds = self.viewer.world.getHomeBounds();\n        return point.x >= 0 && point.x <= bounds.width && point.y >= 0 && point.y <= bounds.height;\n    }\n\n    function restrictVector(delta, end) {\n        var start;\n        for (var prop in {x: 0, y: 0}) {\n            start = end[prop] - delta[prop];\n            if (start < 1 && start > 0) {\n                if (end[prop] > 1) {\n                    delta[prop] -= end[prop] - 1;\n                    end[prop] = 1;\n                } else if (end[prop] < 0) {\n                    delta[prop] -= end[prop];\n                    end[prop] = 0;\n                }\n            }\n        }\n    }\n\n})(OpenSeadragon);\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class Overlay\n     * @classdesc Provides a way to float an HTML element on top of the viewer element.\n     *\n     * @memberof OpenSeadragon\n     * @param {Object} options\n     * @param {Element} options.element\n     * @param {OpenSeadragon.Point|OpenSeadragon.Rect|OpenSeadragon.SelectionRect} options.location - The\n     * location of the overlay on the image. If a {@link OpenSeadragon.Point}\n     * is specified, the overlay will keep a constant size independently of the\n     * zoom. If a {@link OpenSeadragon.Rect} is specified, the overlay size will\n     * be adjusted when the zoom changes.\n     * @param {OpenSeadragon.OverlayPlacement} [options.placement=OpenSeadragon.OverlayPlacement.TOP_LEFT]\n     * Relative position to the viewport.\n     * Only used if location is a {@link OpenSeadragon.Point}.\n     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]\n     * @param {Boolean} [options.checkResize=true] Set to false to avoid to\n     * check the size of the overlay everytime it is drawn when using a\n     * {@link OpenSeadragon.Point} as options.location. It will improve\n     * performances but will cause a misalignment if the overlay size changes.\n     */\n    $.SelectionOverlay = function( element, location) {\n        $.Overlay.apply( this, arguments );\n\n        // set the rotation in radians\n        if ( $.isPlainObject( element ) ) {\n            this.rotation = element.location.rotation || 0;\n        } else {\n            this.rotation = location.rotation || 0;\n        }\n    };\n\n    $.SelectionOverlay.prototype = $.extend( Object.create($.Overlay.prototype), {\n\n        /**\n         * @function\n         * @param {Element} container\n         */\n        drawHTML: function() {\n            $.Overlay.prototype.drawHTML.apply( this, arguments );\n            this.style.transform = this.style.transform.replace(/ ?rotate\\(.+rad\\)/, '') +\n                ' rotate(' + this.rotation + 'rad)';\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location\n         * @param {OpenSeadragon.OverlayPlacement} position\n         */\n        update: function( location ) {\n            $.Overlay.prototype.update.apply( this, arguments );\n            this.rotation = location.rotation || 0;\n        }\n    });\n\n}( OpenSeadragon ));\n","(function( $ ){\n    'use strict';\n\n    /**\n     * @class SelectionRect\n     * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds rotation\n     * around the center point\n     *\n     * @memberof OpenSeadragon\n     * @extends OpenSeadragon.Rect\n     * @param {Number} x The vector component 'x'.\n     * @param {Number} y The vector component 'y'.\n     * @param {Number} width The vector component 'height'.\n     * @param {Number} height The vector component 'width'.\n     * @param {Number} rotation The rotation in radians\n     */\n    $.SelectionRect = function( x, y, width, height, rotation ) {\n        $.Rect.apply( this, [ x, y, width, height ] );\n\n        /**\n         * The rotation in radians\n         * @member {Number} rotation\n         * @memberof OpenSeadragon.SelectionRect#\n         */\n        this.rotation = rotation || 0;\n    };\n\n    $.SelectionRect.fromRect = function(rect) {\n        return new $.SelectionRect(\n            rect.x,\n            rect.y,\n            rect.width,\n            rect.height\n        );\n    };\n\n    $.SelectionRect.prototype = $.extend( Object.create($.Rect.prototype), {\n\n        /**\n         * @function\n         * @returns {OpenSeadragon.Rect} a duplicate of this Rect\n         */\n        clone: function() {\n            return new $.SelectionRect(this.x, this.y, this.width, this.height, this.rotation);\n        },\n\n        /**\n         * Determines if two Rectangles have equivalent components.\n         * @function\n         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.\n         * @return {Boolean} 'true' if all components are equal, otherwise 'false'.\n         */\n        equals: function( other ) {\n            return $.Rect.prototype.equals.apply(this, [ other ]) &&\n                ( this.rotation === other.rotation );\n        },\n\n        /**\n         * Provides a string representation of the rectangle which is useful for\n         * debugging.\n         * @function\n         * @returns {String} A string representation of the rectangle.\n         */\n        toString: function() {\n            return '[' +\n                (Math.round(this.x*100) / 100) + ',' +\n                (Math.round(this.y*100) / 100) + ',' +\n                (Math.round(this.width*100) / 100) + 'x' +\n                (Math.round(this.height*100) / 100) + '@' +\n                (Math.round(this.rotation*100) / 100) +\n            ']';\n        },\n\n        swapWidthHeight: function() {\n            var swapped = this.clone();\n            swapped.width = this.height;\n            swapped.height = this.width;\n            swapped.x += (this.width - this.height) / 2;\n            swapped.y += (this.height - this.width) / 2;\n            return swapped;\n        },\n\n        /**\n         * @function\n         * @returns {Number} The rotaion in degrees\n         */\n        getDegreeRotation: function() {\n            return this.rotation * (180/Math.PI);\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Point} point\n         * @returns {Number} The angle in radians\n         */\n        getAngleFromCenter: function(point) {\n            var diff = point.minus(this.getCenter());\n            return Math.atan2(diff.x, diff.y);\n        },\n\n        /**\n         * Rounds pixel coordinates\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        round: function() {\n            return new $.SelectionRect(\n                Math.round(this.x),\n                Math.round(this.y),\n                Math.round(this.width),\n                Math.round(this.height),\n                this.rotation\n            );\n        },\n\n        /**\n         * Fixes negative width/height, rotation larger than PI\n         * @function\n         * @returns {SelectionRect} The normalized rect\n         */\n        normalize: function() {\n            var fixed = this.clone();\n            if (fixed.width < 0) {\n                fixed.x += fixed.width;\n                fixed.width *= -1;\n            }\n            if (fixed.height < 0) {\n                fixed.y += fixed.height;\n                fixed.height *= -1;\n            }\n            fixed.rotation %= Math.PI;\n            return fixed;\n        },\n\n        /**\n         * @function\n         * @param {OpenSeadragon.Rect} area\n         * @returns {Boolean} Does this rect fit in a specified area\n         */\n        fitsIn: function(area) {\n            var rect = this.normalize();\n            var corners = [\n                rect.getTopLeft(),\n                rect.getTopRight(),\n                rect.getBottomRight(),\n                rect.getBottomLeft(),\n            ];\n            var center = rect.getCenter();\n            var rotation = rect.getDegreeRotation();\n            var areaEnd = area.getBottomRight();\n            for (var i = 0; i < 4; i++) {\n                corners[i] = corners[i].rotate(rotation, center);\n                if (corners[i].x < area.x || corners[i].x > areaEnd.x ||\n                    corners[i].y < area.y || corners[i].y > areaEnd.y) {\n                    return false;\n                }\n            }\n            return true;\n        },\n\n        /**\n         * Reduces rotation to within [-45, 45] degrees by swapping width & height\n         * @function\n         * @returns {SelectionRect} The altered rect\n         */\n        reduceRotation: function() {\n            var reduced;\n            if (this.rotation < Math.PI / (-4)) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation += Math.PI / 2;\n            } else if (this.rotation > Math.PI / 4) {\n                reduced = this.swapWidthHeight();\n                reduced.rotation -= Math.PI / 2;\n            } else {\n                reduced = this.clone();\n            }\n            return reduced;\n        },\n    });\n\n}( OpenSeadragon ));\n"]}